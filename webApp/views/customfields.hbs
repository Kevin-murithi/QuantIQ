<h1>Dynamic Data Entry Form</h1>
    <form id="dynamic-form">
        <table id="dynamic-table" border="1">
            <thead>
                <tr>
                    <th>Field Name</th>
                    <th>Field Type</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dynamically added rows will go here -->
            </tbody>
        </table>
        <button type="button" id="add-column">Add Column</button>
        <button type="submit">Submit</button>
    </form>




<script>
  const tableBody = document.querySelector('#dynamic-table tbody');
  const addColumnButton = document.getElementById('add-column');
  let columnCount = 0;

  // Fetch tenantId dynamically from URL parameters
const user = JSON.parse(localStorage.getItem('user')); // Parse the JSON string

// Extract tenantId from the user object
const tenantId = user?.tenantId;
console.log('tenantId from URL:', tenantId);

  if (!tenantId) {
    console.error('Tenant ID not found in URL');
    alert('Tenant ID is required');
    throw new Error('Tenant ID is required');
  }

  const token = localStorage.getItem('token'); 
  console.log('Auth token:', token);

  if (!token) {
    alert('You must be logged in to access this page');
    window.location.href = '/login';
    throw new Error('Token is required');
  }

  async function fetchExistingData() {
    try {
      const response = await fetch(`/customentries/${tenantId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data && data.entryData) {
          populateTable(data.entryData);
        } else {
          console.error('No entry data found');
          alert('No entry data found');
        }
      } else {
        const error = await response.json();
        console.error('Error fetching data:', error);
        alert('Error fetching data');
      }
    } catch (error) {
      console.error('Error fetching data:', error);
      alert('Error fetching data');
    }
  }

  function populateTable(entryData) {
    if (!entryData) return;

    for (const [fieldName, { type, value }] of Object.entries(entryData)) {
      columnCount++;
      const rowHTML = `
        <tr id="column-${columnCount}">
          <td><input type="text" placeholder="Field Name" required name="fieldName-${columnCount}" value="${fieldName}" /></td>
          <td>
            <select name="fieldType-${columnCount}">
              <option value="text" ${type === 'text' ? 'selected' : ''}>Text</option>
              <option value="number" ${type === 'number' ? 'selected' : ''}>Number</option>
              <option value="date" ${type === 'date' ? 'selected' : ''}>Date</option>
              <option value="boolean" ${type === 'boolean' ? 'selected' : ''}>Checkbox</option>
            </select>
          </td>
          <td><input type="text" placeholder="Value" name="fieldValue-${columnCount}" value="${value}" /></td>
        </tr>
      `;
      tableBody.insertAdjacentHTML('beforeend', rowHTML);
    }
  }

  addColumnButton.addEventListener('click', () => {
    columnCount++;
    const rowHTML = `
      <tr id="column-${columnCount}">
        <td><input type="text" placeholder="Field Name" required name="fieldName-${columnCount}" /></td>
        <td>
          <select name="fieldType-${columnCount}">
            <option value="text">Text</option>
            <option value="number">Number</option>
            <option value="date">Date</option>
            <option value="boolean">Checkbox</option>
          </select>
        </td>
        <td><input type="text" placeholder="Value" name="fieldValue-${columnCount}" /></td>
      </tr>
    `;
    tableBody.insertAdjacentHTML('beforeend', rowHTML);
  });

  document.getElementById('dynamic-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const fields = {};
    let valid = true;
    Array.from(tableBody.children).forEach((row) => {
      const fieldName = row.querySelector(`input[name^="fieldName-"]`).value;
      const fieldType = row.querySelector(`select[name^="fieldType-"]`).value;
      const fieldValue = row.querySelector(`input[name^="fieldValue-"]`).value;

      // Validate the fields
      if (!fieldName || !fieldValue) {
        valid = false;
        row.style.backgroundColor = '#f8d7da'; // Mark invalid fields
      } else {
        row.style.backgroundColor = ''; // Reset invalid fields
        fields[fieldName] = { type: fieldType, value: fieldValue };
      }
    });

    // If no fields are valid, show an error message and stop
    if (!valid) {
      alert("Please fill in all fields properly.");
      return;
    }

    const data = {
      tenantId,  // Dynamic tenantId from URL
      entryData: fields
    };

    try {
      const response = await fetch('/customentries', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}` // Add the token to the headers
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('Success:', result);
        alert('Custom entry saved successfully!');
      } else {
        const error = await response.json();
        console.error('Error:', error);
        alert('Error saving custom entry');
      }
    } catch (error) {
      console.error('Request failed:', error);
      alert('An error occurred');
    }
  });

  // Fetch and populate the table when the page loads
  window.onload = fetchExistingData;
</script>




