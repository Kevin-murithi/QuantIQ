<h1>Dynamic Data Entry Form</h1>
    <form id="dynamic-form">
        <table id="dynamic-table" border="1">
            <thead>
                <tr>
                    <th>Field Name</th>
                    <th>Field Type</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dynamically added rows will go here -->
            </tbody>
        </table>
        <button type="button" id="add-column">Add Column</button>
        <button type="submit">Submit</button>
    </form>

    {{!-- <script>
        const tableBody = document.querySelector('#dynamic-table tbody');
        const addColumnButton = document.getElementById('add-column');

        let columnCount = 0;

        // Add a new column dynamically
        addColumnButton.addEventListener('click', () => {
            columnCount++;
            const rowHTML = `
                <tr id="column-${columnCount}">
                    <td><input type="text" placeholder="Field Name" required name="fieldName-${columnCount}" /></td>
                    <td>
                        <select name="fieldType-${columnCount}">
                            <option value="text">Text</option>
                            <option value="number">Number</option>
                            <option value="date">Date</option>
                            <option value="boolean">Checkbox</option>
                        </select>
                    </td>
                    <td><input type="text" placeholder="Value" name="fieldValue-${columnCount}" /></td>
                </tr>
            `;
            tableBody.insertAdjacentHTML('beforeend', rowHTML);
        });

        // Handle form submission
        document.getElementById('dynamic-form').addEventListener('submit', async (e) => {
            e.preventDefault();

            const fields = {};
            Array.from(tableBody.children).forEach((row) => {
                const fieldName = row.querySelector(`input[name^="fieldName-"]`).value;
                const fieldType = row.querySelector(`select[name^="fieldType-"]`).value;
                const fieldValue = row.querySelector(`input[name^="fieldValue-"]`).value;

                // Only add non-empty fields to the fields object
                if (fieldName && fieldValue) {
                    fields[fieldName] = { type: fieldType, value: fieldValue };
                }
            });

            // If no fields were provided, return early
            if (Object.keys(fields).length === 0) {
                alert("Please fill in at least one field.");
                return;
            }

            const data = {
                tenantId: 1, // Static tenant ID for now
                entryData: fields
            };

            try {
                const response = await fetch('/customentries', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Success:', result);
                    alert('Custom entry saved successfully!');
                } else {
                    const error = await response.json();
                    console.error('Error:', error);
                    alert('Error saving custom entry');
                }
            } catch (error) {
                console.error('Request failed', error);
                alert('An error occurred');
            }
        });
    </script> --}}

<script>
    const tableBody = document.querySelector('#dynamic-table tbody');
    const addColumnButton = document.getElementById('add-column');
    let columnCount = 0;
    const tenantId = 1;  // Static tenant ID for now

    // Fetch existing data for the given tenantId
    async function fetchExistingData() {
        try {
            const response = await fetch(`/customentries/${tenantId}`);
            if (response.ok) {
                const data = await response.json();
                if (data && data.entryData) {
                    populateTable(data.entryData);
                } else {
                    console.error('No entry data found or data is malformed');
                }
            } else {
                console.error('Error fetching existing data');
            }
        } catch (error) {
            console.error('Error fetching data', error);
        }
    }

    // Populate the table with existing data
    function populateTable(entryData) {
        if (!entryData) return;

        for (const [fieldName, { type, value }] of Object.entries(entryData)) {
            columnCount++;
            const rowHTML = `
                <tr id="column-${columnCount}">
                    <td><input type="text" placeholder="Field Name" required name="fieldName-${columnCount}" value="${fieldName}" /></td>
                    <td>
                        <select name="fieldType-${columnCount}">
                            <option value="text" ${type === 'text' ? 'selected' : ''}>Text</option>
                            <option value="number" ${type === 'number' ? 'selected' : ''}>Number</option>
                            <option value="date" ${type === 'date' ? 'selected' : ''}>Date</option>
                            <option value="boolean" ${type === 'boolean' ? 'selected' : ''}>Checkbox</option>
                        </select>
                    </td>
                    <td><input type="text" placeholder="Value" name="fieldValue-${columnCount}" value="${value}" /></td>
                </tr>
            `;
            tableBody.insertAdjacentHTML('beforeend', rowHTML);
        }
    }

    // Add a new column dynamically
    addColumnButton.addEventListener('click', () => {
        columnCount++;
        const rowHTML = `
            <tr id="column-${columnCount}">
                <td><input type="text" placeholder="Field Name" required name="fieldName-${columnCount}" /></td>
                <td>
                    <select name="fieldType-${columnCount}">
                        <option value="text">Text</option>
                        <option value="number">Number</option>
                        <option value="date">Date</option>
                        <option value="boolean">Checkbox</option>
                    </select>
                </td>
                <td><input type="text" placeholder="Value" name="fieldValue-${columnCount}" /></td>
            </tr>
        `;
        tableBody.insertAdjacentHTML('beforeend', rowHTML);
    });

    // Handle form submission
    document.getElementById('dynamic-form').addEventListener('submit', async (e) => {
        e.preventDefault();

        const fields = {};
        Array.from(tableBody.children).forEach((row) => {
            const fieldName = row.querySelector(`input[name^="fieldName-"]`).value;
            const fieldType = row.querySelector(`select[name^="fieldType-"]`).value;
            const fieldValue = row.querySelector(`input[name^="fieldValue-"]`).value;

            // Only add non-empty fields to the fields object
            if (fieldName && fieldValue) {
                fields[fieldName] = { type: fieldType, value: fieldValue };
            }
        });

        // If no fields were provided, return early
        if (Object.keys(fields).length === 0) {
            alert("Please fill in at least one field.");
            return;
        }

        const data = {
            tenantId,  // Static tenant ID for now
            entryData: fields
        };

        try {
            const response = await fetch('/customentries', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                const result = await response.json();
                console.log('Success:', result);
                alert('Custom entry saved successfully!');
            } else {
                const error = await response.json();
                console.error('Error:', error);
                alert('Error saving custom entry');
            }
        } catch (error) {
            console.error('Request failed', error);
            alert('An error occurred');
        }
    });

    // Fetch and populate the table when the page loads
    window.onload = fetchExistingData;
</script>

